{"version":3,"sources":["components/Circle/index.jsx","components/Title/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Circle","state","show","this","props","index","color","setTimeout","setState","className","style","display","width","height","r","cy","cx","strokeWidth","fill","React","Component","Title","viewBox","transform","fontSize","fontFamily","currentColor","currentName","currentList","list","map","name","value","key","id","renderList","set","cls","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m6NAIqBA,G,kNACnBC,MAAQ,CACNC,MAAM,G,mEAEc,IAAD,SACMC,KAAKC,MAAfC,GADI,EACXC,MADW,EACJD,OACfE,YAAW,WACT,EAAKC,SAAS,CACZN,MAAM,MAEC,EAARG,K,+BAGK,IAAD,EACkBF,KAAKC,MAAtBE,EADD,EACCA,MACAJ,GAFD,EACQG,MACEF,KAAKF,MAAdC,MACR,OACE,yBAAKO,UAAU,SAASC,MAAOR,EAAO,CAAES,QAAS,SAAY,MAC3D,yBAAKC,MAAM,OAAOC,OAAO,QACvB,4BACEC,EAAE,OACFC,GAAG,OACHC,GAAG,OACHC,YAAY,MACZP,MAAO,CAAEQ,KAAMZ,W,GAxBSa,IAAMC,YCF3B,SAASC,IACtB,OACE,yBAAKZ,UAAU,SACb,yBAAKa,QAAQ,oBACX,2BACE,0BACEC,UAAU,qBACVC,SAAS,MACTN,KAAK,UACLO,WAAW,YAJb,OAUJ,yBAAKH,QAAQ,oBACX,2BACE,0BACEC,UAAU,qBACVC,SAAS,MACTN,KAAK,UACLO,WAAW,YAJb,OAUJ,yBAAKH,QAAQ,oBACX,2BACE,0BACEC,UAAU,qBACVC,SAAS,MACTN,KAAK,UACLO,WAAW,YAJb,OAUJ,yBAAKH,QAAQ,oBACX,2BACE,0BACEC,UAAU,qBACVC,SAAS,MACTN,KAAK,UACLO,WAAW,YAJb,OAUJ,yBAAKH,QAAQ,mBACX,2BACE,0BACEC,UAAU,qBACVC,SAAS,MACTN,KAAK,UACLO,WAAW,YAJb,Q,yNChDRxB,MAAQ,CACNyB,aAAc,MACdC,YAAa,SACbC,YAAaC,EAAK,GAAGA,M,2DAKrB,OADwB1B,KAAKF,MAArB2B,YACWE,KAAI,WAAkBzB,GAAW,IAA1B0B,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,MAC9B,OAAO,kBAAC,EAAD,CAAQC,IAAKF,EAAMzB,MAAO0B,EAAO3B,MAAOA,S,+BAIzC,IAAD,SAC+BF,KAAKF,MAAnCyB,EADD,EACCA,aADD,EACeC,YAEtB,OACE,yBAAKO,GAAG,OACN,yBAAKzB,UAAU,WACb,yBAAKA,UAAU,QAAQN,KAAKgC,cAC5B,yBAAK1B,UAAU,SACb,kBAACY,EAAD,MACA,yBAAKZ,UAAU,cACZoB,EAAKC,KAAI,YAAoB,IAAjBM,EAAgB,EAAhBA,IAAKP,EAAW,EAAXA,KAChB,OACE,yBACEI,IAAKG,EACL3B,UAAW4B,IAAID,EAAKA,IAAQV,EAAe,SAAW,MACtDY,QAAS,kBACP,EAAK9B,SAAS,CAAEoB,YAAaC,EAAMH,aAAcU,kB,GA9B1CjB,IAAMC,WCMfmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.746e8ffb.chunk.js","sourcesContent":["import React from \"react\";\nimport cls from \"classnames\";\nimport \"./style.css\";\n\nexport default class Circle extends React.Component {\n  state = {\n    show: false,\n  };\n  componentWillMount() {\n    const { color, index } = this.props;\n    setTimeout(() => {\n      this.setState({\n        show: true,\n      });\n    }, index * 8);\n  }\n\n  render() {\n    const { color, index } = this.props;\n    const { show } = this.state;\n    return (\n      <div className=\"circle\" style={show ? { display: \"block\" } : null}>\n        <svg width=\"40px\" height=\"40px\">\n          <circle\n            r=\"20px\"\n            cy=\"20px\"\n            cx=\"20px\"\n            strokeWidth=\"1.5\"\n            style={{ fill: color }}\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n// Object.assign(style, { backgroundColor: color })\n","import React from \"react\";\n\nexport default function Title() {\n  return (\n    <div className=\"title\">\n      <svg viewBox=\"0 0 74.84 115.12\">\n        <g>\n          <text\n            transform=\"translate(0 88.83)\"\n            fontSize=\"106\"\n            fill=\"#ffb93f\"\n            fontFamily=\"Broadway\"\n          >\n            C\n          </text>\n        </g>\n      </svg>\n      <svg viewBox=\"0 0 80.38 115.12\">\n        <g>\n          <text\n            transform=\"translate(0 88.83)\"\n            fontSize=\"106\"\n            fill=\"#ac568a\"\n            fontFamily=\"Broadway\"\n          >\n            O\n          </text>\n        </g>\n      </svg>\n      <svg viewBox=\"0 0 70.96 115.12\">\n        <g>\n          <text\n            transform=\"translate(0 88.83)\"\n            fontSize=\"106\"\n            fill=\"#4f93a3\"\n            fontFamily=\"Broadway\"\n          >\n            L\n          </text>\n        </g>\n      </svg>\n      <svg viewBox=\"0 0 80.38 115.12\">\n        <g>\n          <text\n            transform=\"translate(0 88.83)\"\n            fontSize=\"106\"\n            fill=\"#BC5569\"\n            fontFamily=\"Broadway\"\n          >\n            O\n          </text>\n        </g>\n      </svg>\n      <svg viewBox=\"0 0 81.1 115.12\">\n        <g>\n          <text\n            transform=\"translate(0 88.83)\"\n            fontSize=\"106\"\n            fill=\"#a7bd3f\"\n            fontFamily=\"Broadway\"\n          >\n            R\n          </text>\n        </g>\n      </svg>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Circle from \"./components/Circle/index\";\nimport Title from \"./components/Title/index\";\nimport list from \"./data/list.json\";\nimport cls from \"classnames\";\n\nexport default class extends React.Component {\n  state = {\n    currentColor: \"red\",\n    currentName: \"ç™½\",\n    currentList: list[0].list,\n  };\n\n  renderList() {\n    const { currentList } = this.state;\n    return currentList.map(({ name, value }, index) => {\n      return <Circle key={name} color={value} index={index} />;\n    });\n  }\n\n  render() {\n    const { currentColor, currentName } = this.state;\n\n    return (\n      <div id=\"app\">\n        <div className=\"wrapper\">\n          <div className=\"left\">{this.renderList()}</div>\n          <div className=\"right\">\n            <Title />\n            <div className=\"color-card\">\n              {list.map(({ set, list }) => {\n                return (\n                  <div\n                    key={set}\n                    className={cls(set, set === currentColor ? \"active\" : null)}\n                    onClick={() =>\n                      this.setState({ currentList: list, currentColor: set })\n                    }\n                  ></div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}